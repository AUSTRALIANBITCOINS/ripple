- content_for :title do
  Model Design

%section#basics
  :markdown
    ## Basic Model

    Make a new model in `app/models`.

    #{snippet 'post_basic.rb'}

  = source_dive do
    :markdown
      For more about what property classes are available, look at
      [`core_ext/casting.rb`](https://github.com/basho/ripple/blob/master/lib/ripple/core_ext/casting.rb).
      The short answer is that instances of a property class need a `ripple_cast`
      method.

  :markdown
    This model has two `String` properties. Some of the other classes available
    for properties are `Integer`, `Float`, `Numeric`, `Symbol`, `Boolean`,
    `Time`, `Date`, and `DateTime`.

    Both `String` properties are required to be present.

    Let's play with an instance of the Post class:

    #{snippet 'post_usage.rb'}

%section#keys
  :markdown
    ## Alternate Keys

    Sometimes you don't want a Riak-assigned key: "37458abc752f8413e" is pretty
    gross.

  = source_dive do
    :markdown
      Key logic is defined in 
      [`document/key.rb`](https://github.com/basho/ripple/blob/master/lib/ripple/document/key.rb).

  :markdown
    You can use `key_on` to declare a single property as the key:

    #{snippet 'user_key_on.rb'}

    Ripple calls the `key` method to figure out the key, so if you want a 
    composite key (or really any complicated key) you can define it that way:

    #{snippet 'timeseries_key_method.rb'}

    You can also just assign the key yourself.

    #{snippet 'post_key_assignment.rb'}

    If you have a complicated keying setup, it might be worthwhile to move
    keying logic to a separate class:

    #{snippet 'timeseries_key_class.rb'}        

    By having this logic isolated, it becomes much easier to test and reason
    about independently from the model or business logic.
